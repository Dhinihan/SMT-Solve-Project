% Answers %
x, y, z: REAL;
% Words predicatives %
v, n, d: INT -> BOOLEAN;
% Matrices that store the distances %
dist_vn, dist_nd, dist_dv : ARRAY [INT,INT] OF REAL;

% Recursive predcatives for summation %
sum_line_vn, sum_line_nd, sum_line_dv,
sum_col_vn , sum_col_nd , sum_col_dv : (INT, INT) -> REAL; 


% Filling the distance matrices with zeros %
ASSERT FORALL (i, j: INT) : 

    (NOT (v(i) AND n(j)) => dist_vn[(i,j)] = 0)
AND 
    (NOT (n(i) AND d(j)) => dist_nd[(i,j)] = 0)
AND
    (NOT (d(i) AND v(j)) => dist_dv[(i,j)] = 0);

% Defining the distance function %
ASSERT FORALL (i, j: INT) :

    (v(i) AND n(j) => dist_vn[(i,j)] = 1/((i-j)*(i-j)))
AND
    (n(i) AND d(j) => dist_nd[(i,j)] = 1/((i-j)*(i-j)))
AND
    (d(i) AND v(j) => dist_dv[(i,j)] = 1/((i-j)*(i-j)));

% Defining the recursive summation %
ASSERT FORALL (i, j: INT) :

    IF (j = 0) THEN (sum_line_vn(i,j) = dist_vn[(i,j)]) 
    ELSE (sum_line_vn(i,j) = dist_vn[(i,j)] + sum_line_vn(i,j-1)) 
    ENDIF
AND 
    IF (j = 0) THEN (sum_line_nd(i,j) = dist_nd[(i,j)]) 
    ELSE (sum_line_nd(i,j) = dist_nd[(i,j)] + sum_line_nd(i,j-1)) 
    ENDIF
AND 
    IF (j = 0) THEN (sum_line_dv(i,j) = dist_dv[(i,j)]) 
    ELSE (sum_line_dv(i,j) = dist_dv[(i,j)] + sum_line_dv(i,j-1)) 
    ENDIF 
AND
    IF (i = 0) THEN ( sum_col_vn(i,j) = sum_line_vn(i,j) )
    ELSE ( sum_col_vn(i,j) = sum_line_vn(i,j) + sum_col_vn(i-1,j) ) 
    ENDIF
AND                            
    IF (i = 0) THEN ( sum_col_nd(i,j) = sum_line_nd(i,j) )
    ELSE ( sum_col_nd(i,j) = sum_line_nd(i,j) + sum_col_nd(i-1,j) ) 
    ENDIF
AND
    IF (i = 0) THEN ( sum_col_dv(i,j) = sum_line_dv(i,j) )
    ELSE ( sum_col_dv(i,j) = sum_line_dv(i,j) + sum_col_dv(i-1,j) ) 
    ENDIF;

% Ensuring the disjunction % 
ASSERT FORALL (i: INT) : 
    (v(i) => (NOT n(i) AND NOT d(i)))
AND
    (n(i) => (NOT d(i) AND NOT v(i)))
AND
    (d(i) => (NOT v(i) AND NOT n(i)));
